<?xml version="1.0" encoding="UTF-8"?>
<!-- These variables define the Windows Installer product version, product code and upgrade code. They   -->
<!-- will be used later on in this file.  this value should be B U I LD_SCRIPT_MUST_REPLACE_AT_RUNTIME (in quotes) -->
<?define Property_ProductVersion = "BUILD_SCRIPT_MUST_REPLACE_AT_RUNTIME" ?>
<!--this is replaced at build time by the msbuild 'package' target -->
<?define Property_ProductCode = "*" ?>
<!-- auto-generate a new guid each time -->
<?define Property_UpgradeCode = "{4AE3E9D2-13BF-44E6-86E6-4E8C36F71ECE}" ?>
<!--Don't even think of EVER changing this -->

<!-- good intro to the component vs. file thing, and why each file here is a separate component:
http://blogs.msdn.com/robmen/archive/2003/10/04/56479.aspx -->

<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension"
      xmlns:fire="http://schemas.microsoft.com/wix/FirewallExtension">

  <Product Id="$(var.Property_ProductCode)" Name="Reference Text Utility for Glyssen $(var.Property_ProductVersion)" Language="1033"
             Version="$(var.Property_ProductVersion)" Manufacturer="FCBH-SIL"
             UpgradeCode="$(var.Property_UpgradeCode)">

    <Package  Compressed="yes" InstallerVersion="200" />

    <!-- changed schedule from afterInstallInitialize, to afterInstallValidate, hopes that upgrades which have some library (e.g. palaso) with a lower version won't leave us
        with no palaso at all, as afterInstallInitialize was doing. But it's not clear whether even this will work, as it depends on when the "costing" happens:
        http://msdn.microsoft.com/en-us/library/aa371197.aspx -->
    <MajorUpgrade   Schedule="afterInstallValidate"
  DowngradeErrorMessage="A later version of the Reference Text Utility for Glyssen is already installed. If you really want to downgrade, first uninstall the Reference Text Utility for Glyssen, then do this install again."/>

    <Upgrade Id ="$(var.Property_UpgradeCode)" >
      <UpgradeVersion Minimum ="$(var.Property_ProductVersion)" OnlyDetect ="yes" Property ="NEWVERSIONDETECTED" />
      <UpgradeVersion Minimum ="0.0.0" IncludeMinimum ="yes" Maximum ="$(var.Property_ProductVersion)" IncludeMaximum ="no" Property ="OLDERVERSIONBEINGUPGRADED" />
    </Upgrade >

    <!-- show the license page (note that at this time the Ref Text Utility does not actually use Analytics, as (vaguely) implied in the Licence, but no big deal. -->
    <UIRef Id="WixUI_Minimal"/>
    <WixVariable Id="WixUILicenseRtf" Value="..\..\distfiles\License.rtf" />
    <!-- Top banner / 493 × 58 -->
    <WixVariable Id="WixUIBannerBmp" Value="installerBanner.jpg" />
    <!-- Background bitmap used on the welcome and completion dialogs / 493 × 312 -->
    <WixVariable Id="WixUIDialogBmp" Value="installerBackground.jpg" />

    <!--
    "from the list: Don't use Advertise="yes" Advertised shortcuts are designed to allow
users to install just the shortcut for your app, then demand-install the
rest of the app the first time the icon is run.  If this is not behavior you
are trying to support, you're better off using non-advertised shortcuts. "-->

    <!--ProductSearch UpgradeCode='{cd92c128-d3c7-4c9a-acc6-81e4184ef6ca}' Variable='GLYSSENFOUND'/-->
    <Upgrade Id ="{cd92c128-d3c7-4c9a-acc6-81e4184ef6ca}" >
      <UpgradeVersion Minimum ="1.0.0.0" IncludeMinimum ="yes" OnlyDetect ="yes" Property ="GLYSSENFOUND" />
    </Upgrade >
	
	<Condition Message="The Reference Text Utility requires that Glyssen 1.0 or later be installed.">
		<![CDATA[Installed OR (GLYSSENFOUND >= "1.0.0.0")]]>
	</Condition>

    <!--because of bug, this needs to be 1 -->
    <Property Id ="ALLUSERS">1</Property>
	
	<!--Property Id="GYSSENSHORTCUTDIR_EXISTS" Secure="yes">
		<RegistrySearch Id='RegistrySearchGlyssenShortcutDir' Type='directory'
			Root='HKCU' Key='SOFTWARE\Glyssen\Components\GlyssenShortcutDir' Name='Path'>
			<DirectorySearch Id='DirectorySearchGlyssenShortcut' Path='[GYSSENSHORTCUTDIR_EXISTS]'/>
		</RegistrySearch>
	</Property-->
	
	<Property Id="GYSSENSHORTCUTDIR_IF_IT_EXISTS" Secure="yes">
		<DirectorySearch Id='DirectorySearchGlyssenShortcut' Path='[GlyssenShortcutDir]'/>
	</Property>

    <Directory Id="TARGETDIR" Name="SourceDir">

	  <Directory Id='ProgramMenuFolder' Name='Programs'>
        <Directory Id='GlyssenShortcutDir' Name='Glyssen'>
		  <Component Id ='removeShortcutDir' Guid ="{1a00c239-ee2c-4bd7-bb7d-64a8f0d44e8c}">
            <RemoveFolder Id ="shortcutDirRemover" On ="uninstall"/>
            <RegistryKey Id="keyPathForRemoveShortcutDir" ForceCreateOnInstall="yes" Root="HKCU" Key="SOFTWARE\Glyssen\Components\GlyssenShortcutDir">
              <RegistryValue Type ="string" Value =""  Action ="write" KeyPath ="yes"/>
            </RegistryKey>
          </Component>
		</Directory>
	  </Directory>
		
      <Directory Id="ProgramFilesFolder" Name="PFiles">

        <Directory Id="ProgramDir" Name="Glyssen">
          <Component Id="ReferenceTextUtility.exe" Guid="{92306462-199c-4484-b5ec-8c0f4346be65}">
            <RegistryKey Root="HKCU" Key="SOFTWARE\Glyssen\Components\ReferenceTextUtility.exe" />
            <File Id="ReferenceTextUtility.exe" Name="ReferenceTextUtility.exe" Source="..\..\output\release\ReferenceTextUtility.exe"/>
			<File Id="ReferenceTextUtility.pdb" Name="ReferenceTextUtility.pdb" Source="..\..\output\release\ReferenceTextUtility.pdb"/>
          </Component>
          
		  <Component Id="RTUShortcut" Guid="{d6d5e117-3d41-48ff-802a-bdd76328443e}">
            <Shortcut Id="startmenuShortcut" Directory="GlyssenShortcutDir" Name="Reference Text Utility for Glyssen"
                 WorkingDirectory="ProgramDir" Target="[!ReferenceTextUtility.exe]" Icon="ReferenceTextUtility.exe" />
			<RemoveFile Id ="CleanupShortcut" Name="[!ReferenceTextUtility.exe]" On ="uninstall"/>
            <RegistryKey Id="keyPathForRemoveShortcut" ForceCreateOnInstall="yes" Root="HKCU" Key="SOFTWARE\Glyssen\Components\GlyssenRTUShortcut">
              <RegistryValue Type ="string" Value =""  Action ="write" KeyPath ="yes"/>
            </RegistryKey>
			<Condition>
				GYSSENSHORTCUTDIR_IF_IT_EXISTS
			</Condition>
          </Component>

          <Component Id="ReferenceTextUtility.exe.config" Guid="{d45ac38f-524c-47b0-a999-fc51f40c93ec}">
            <File Id="ReferenceTextUtility.exe.config" Name="ReferenceTextUtility.exe.config" KeyPath="yes" Source="..\..\output\release\ReferenceTextUtility.exe.config" />
          </Component>

          <Component Id="RefTextDevUtilities.dll" Guid="{67c98f7f-069d-4939-bcc1-e2aadfa541e3}">
            <File Id="RefTextDevUtilities.dll" Name="RefTextDevUtilities.dll" KeyPath="yes" Source="..\..\output\release\RefTextDevUtilities.dll" />
			<File Id="RefTextDevUtilities.pdb" Name="RefTextDevUtilities.pdb" Source="..\..\output\release\RefTextDevUtilities.pdb" />
          </Component>

        </Directory>
      </Directory>
    </Directory>

    <Feature Id="ProductFeature" Level="1" Title="Basic Stuff">
      <ComponentRef Id="ReferenceTextUtility.exe" />
      <ComponentRef Id="ReferenceTextUtility.exe.config" />
      <ComponentRef Id="RefTextDevUtilities.dll"/>
      <ComponentRef Id="RTUShortcut"/>
      <ComponentRef Id ="removeShortcutDir"/>
    </Feature>

    <Media Id="1" Cabinet="product.cab" EmbedCab="yes" />
    <Icon Id="ReferenceTextUtility.exe" SourceFile ="..\..\output\release\ReferenceTextUtility.exe" />
    <Property Id="ARPPRODUCTICON" Value="ReferenceTextUtility.exe" />
    <!-- what you see in add/remove programs control panel -->

    <CustomAction Id="LaunchRefTextUtil"
                  FileKey="ReferenceTextUtility.exe"
                  ExeCommand=""
                  Return="asyncNoWait"/>

    <InstallExecuteSequence>

      <!--We need the condition here so that we only launch the executable when we make an installation but not when we remove the product-->
          <Custom Action='LaunchRefTextUtil' After="InstallFinalize">NOT Installed</Custom>
        </InstallExecuteSequence>
  </Product>
</Wix>
