<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build;Pack">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_version)' == ''">$(MSBuildProjectDirectory)\..</RootDir>
		<RootDir Condition="'$(teamcity_version)' != ''">$(teamcity_build_checkoutDir)</RootDir>
		<BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">0.0.0.0</BUILD_NUMBER>
		<Solution>Glyssen.sln</Solution>
		<SolutionPath>$(RootDir)/$(Solution)</SolutionPath>
		<ApplicationName>Glyssen</ApplicationName>
		<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
		<ExtraExcludeCategories Condition="'$(teamcity_version)' != ''">SkipOnTeamCity,$(ExtraExcludeCategories)</ExtraExcludeCategories>
		<TeamCity Condition="'$(teamcity_version)' != ''">true</TeamCity>
		<TeamCity Condition="'$(teamcity_version)' == ''">false</TeamCity>
		<SILBuildTasksDLL>$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll</SILBuildTasksDLL>
		<SILReleaseTasksProps>$(RootDir)/packages/SIL.ReleaseTasks/build/SIL.ReleaseTasks.props</SILReleaseTasksProps>
		<RestartBuild Condition="!Exists('$(SILBuildTasksDLL)') Or !Exists('$(SILReleaseTasksProps)')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(SILBuildTasksDLL)') And Exists('$(SILReleaseTasksProps)')">false</RestartBuild>
		<Platform>x64</Platform>
	</PropertyGroup>

	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(SILBuildTasksDLL)"
		Condition="Exists('$(SILBuildTasksDLL)')" />
	<UsingTask TaskName="FileUpdate" AssemblyFile="$(SILBuildTasksDLL)"
		Condition="Exists('$(SILBuildTasksDLL)')" />
	<UsingTask TaskName="NUnit3" AssemblyFile="$(SILBuildTasksDLL)" />

	<Import Project="../.nuget/NuGet.targets" />
	<Import Project="$(SILReleaseTasksProps)" Condition="Exists('$(SILReleaseTasksProps)')" />

	<Target Name="RestoreLocalPackages" DependsOnTargets="CheckPrerequisites">
		<Message Text="Calling $(NuGetCommand) restore ../$(Solution)" />
		<Exec Command='$(NuGetCommand) restore ../$(Solution)' />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.ReleaseTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.libpalaso.l10ns -excludeVersion -Version 9.0.1-beta0011 -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<Message Text="RestartBuild=$(RestartBuild)"/>
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal" Properties="Configuration=$(Configuration)" Condition="$(RestartBuild)" />
	</Target>

	<Target Name="SetInstallerVersionNumber" DependsOnTargets="Build">
		<!-- Now using semantic versioning 2.0.0, so version number comes from GitVersion. -->
		<Message Text="SemVer: $(GitVersion_Semver)" Importance="high"/>

		<PropertyGroup>
			<InstallerFileDestName>$(RootDir)\output\installer\GlyssenInstaller.$(GitVersion_Semver).exe</InstallerFileDestName>
		</PropertyGroup>
		<Message Text="InstallerFileDestName: $(InstallerFileDestName)" Importance="high"/>
	</Target>

	<Target Name="Build">
		<CallTarget Targets="RestoreLocalPackages"/>
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
	</Target>

	<Target Name="BuildInternal">
		<Message Text="BuildInternal : Configuration=$(Configuration)"/>
		<MSBuild Projects="$(RootDir)/$(Solution)"
			Targets="Rebuild"
			Properties="Configuration=$(Configuration);Platform=$(Platform)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<!-- Note: the Exclude here is (hopefully) a temporary solution.
		Ultimately, it would be better not to have a dependency on a project
		which itself contains tests. Let's move the test scaffolding in SIL.DblBundle.Tests
		into a separate test scaffolding dll
		Note: the following line needs to use backslashes; otherwise, the Exclude directive doesn't work. -->
		<CreateItem Include="$(RootDir)\output\$(Configuration)\**\*Tests.dll" Exclude="$(RootDir)\output\$(Configuration)\SIL.DblBundle.Tests.dll">
			<Output ItemName="TestAssemblies" TaskParameter="Include" />
		</CreateItem>
		<NUnit3
			TeamCity="$(TeamCity)"
			Verbose="true"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner.3.18.3/tools"
			WorkingDirectory="$(RootDir)/output/$(Configuration)"
			Assemblies="@(TestAssemblies)"
			ExcludeCategory="$(ExtraExcludeCategories)$(excludedCategories)" 
			Force32Bit="false" />
	</Target>
		
	<Target Name="ConvertReleaseNotesToHtml">
		<CreateReleaseNotesHtml ChangelogFile="$(RootDir)/DistFiles/ReleaseNotes.md"
			HtmlFile="$(RootDir)/output/ReleaseNotes.htm" />
	</Target>
	
	<Target Name="Installer" DependsOnTargets="SetInstallerVersionNumber; MakeWixForDistFiles; MakeWixForXulRunner; Build ">
	
		<Message Text="Making Installer Version: $(GitVersion_MajorMinorPatch)" Importance="high" />

		<!-- set the version number in the installer configuration program.	Perhaps there's a way to just send in the variables rather than this brute-force
			changing of the script, but I haven't figured that out. -->

		<FileUpdate File="$(RootDir)\Installer\Installer.wxs" Regex='Property_ProductVersion = ".*"'
			ReplacementText ="Property_ProductVersion = &quot;$(GitVersion_MajorMinorPatch)&quot;" />

		<FileUpdate File="$(RootDir)\Installer\Bootstrapper\Glyssen Bootstrap Installer.wxs" Regex='Property_ProductVersion = ".*"'
			ReplacementText ="Property_ProductVersion = &quot;$(GitVersion_MajorMinorPatch)&quot;" />
		
		<MSBuild
			Projects="$(RootDir)\Installer\Installer.sln"
			Targets="Rebuild"
			Properties="Configuration=$(Configuration)" />
		<Message Text="Build Complete"/>

		<!-- remove an existing one with the same name, if necessary -->
		<Delete Files="$(InstallerFileDestName)" TreatErrorsAsWarnings="false" />

		<Copy SourceFiles="$(RootDir)\output\installer\GlyssenInstaller.exe"
			DestinationFiles="$(InstallerFileDestName)"
		/>
		<Message Text="Copied installer to $(InstallerFileDestName)" Importance="high"/>

		<!-- remove the installer which has no version number (wouldn't need this if the copy above was a move, instead) -->
		<Delete Files="$(RootDir)\output\installer\GlyssenInstaller.exe" TreatErrorsAsWarnings="false" />

		<!-- copy these so we aren't modifying the originals,
			which then is a pain on dev machines -->
		<Copy SourceFiles ="$(RootDir)\installer\template.download_info"
			DestinationFiles ="$(RootDir)\output\installer\GlyssenInstaller.$(GitVersion_MajorMinorPatch).download_info"/>
		<Copy SourceFiles ="$(RootDir)\installer\template.releasenotes.download_info"
			DestinationFiles ="$(RootDir)\output\releasenotes.download_info"/>

		<!-- appcast.xml is used as part of the update notification system -->
		<Copy SourceFiles ="$(RootDir)\installer\appcast.xml"
			DestinationFolder ="$(RootDir)\output\installer"/>

		<FileUpdate File="$(RootDir)\output\installer\GlyssenInstaller.$(GitVersion_MajorMinorPatch).download_info"
			DatePlaceHolder='_DATE_'
			DateFormat='yyyy-MM-dd'
			Regex='_VERSION_'
			ReplacementText ="$(GitVersion_MajorMinorPatch)" />
			
		<FileUpdate File="$(RootDir)\output\releasenotes.download_info"
			DatePlaceHolder='_DATE_'
			DateFormat='yyyy-MM-dd'
			Regex='_VERSION_'
			ReplacementText ="$(GitVersion_MajorMinorPatch)" />

		<FileUpdate File="$(RootDir)\output\installer\appcast.xml"
			DatePlaceholder='DEV_RELEASE_DATE'
			Regex='DEV_VERSION_NUMBER'
			ReplacementText ="$(GitVersion_MajorMinorPatch)" />

	</Target>

	<Target Name="ReferenceTextUtilityInstaller" DependsOnTargets="SetInstallerVersionNumber; Build ">

		<FileUpdate File="$(RootDir)\Reference Text Utility\Installer\RTUInstaller.wxs" Regex='Property_ProductVersion = ".*"'
			ReplacementText ="Property_ProductVersion = &quot;$(GitVersion_MajorMinorPatch)&quot;" />

		<Message Text="Making Reference Text Utility Installer Version: $(GitVersion_MajorMinorPatch)" Importance="high" />

		<PropertyGroup>	
			<RTUInstallerFileDestName>$(RootDir)\output\RefTextUtilityInstaller\GlyssenRefTextUtilInstaller.$(GitVersion_Semver).msi</RTUInstallerFileDestName>	
		</PropertyGroup>
		<Message Text="RTUInstallerFileDestName: $(RTUInstallerFileDestName)" Importance="high"/>
	
		<MSBuild
			Projects="$(RootDir)\Reference Text Utility\Installer\RTUInstaller.wixproj"
			Properties="Configuration=$(Configuration)" />
		<Message Text="RTUInstaller Build Complete"/>

		<!-- remove an existing one with the same name, if necessary -->
		<Delete Files="$(RTUInstallerFileDestName)" TreatErrorsAsWarnings="false" />

		<Copy SourceFiles="$(RootDir)\output\RefTextUtilityInstaller\GlyssenRefTextUtilInstaller.msi"
			DestinationFiles="$(RTUInstallerFileDestName)"/>
		<Message Text="Copied installer to $(RTUInstallerFileDestName)" Importance="high"/>

		<!-- remove the installer which has no version number (wouldn't need this if the copy above was a move, instead) -->
		<Delete Files="$(RootDir)\output\RefTextUtilityInstaller\RefTextUtilityInstaller.msi" TreatErrorsAsWarnings="false" />

	</Target>

	<!--When building on TeamCity, use one of these targets to build a signed Installer. Pick the appropriate one
	depending on whether your project's output MUST be signed or it's only nice if it is. For example, a continuous build
	might use SignIfPossible, while a Publication build must use SignInstaller.-->
	<Target Name="SignInstaller" DependsOnTargets="Installer">
		<PropertyGroup>
			<IgnoreSigningErrors>false</IgnoreSigningErrors>
		</PropertyGroup>
	</Target>

	<Target Name="SignIfPossible" DependsOnTargets="Installer">
		<PropertyGroup>
			<IgnoreSigningErrors>true</IgnoreSigningErrors>
		</PropertyGroup>
	</Target>
	
	<Target Name="copyLibL10ns" DependsOnTargets="RestoreLocalPackages">
		<Error Text="Palaso L10ns package missing. Expected at $(RootDir)/packages/SIL.libpalaso.l10ns" Condition="!Exists('$(RootDir)/packages/SIL.libpalaso.l10ns/SIL.libpalaso.l10ns.nupkg')" />
		<ItemGroup>
			<XliffFiles Include="$(RootDir)/packages/SIL.libpalaso.l10ns/content/**/*.xlf"/>
		</ItemGroup>
		  <Copy SourceFiles="@(XliffFiles)"
				DestinationFiles="@(XliffFiles->'$(RootDir)/DistFiles/localization/%(Filename)%(Extension)')"
				SkipUnchangedFiles="true"/>
	</Target>

	<Target Name="MakeWixForDistFiles" DependsOnTargets="copyLibL10ns">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>
		<MakeWixForDirTree
			DirectoryReferenceId="ProgramDir"
			ComponentGroupId="DistFiles"
			RootDirectory="$(RootDir)\DistFiles"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedDistFiles.wxs"
			MatchRegExPattern=".*"
			>
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>

	<Target Name="MakeWixForXulRunner">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>
		<MakeWixForDirTree
			DirectoryReferenceId="XulRunnerDir"
			ComponentGroupId="XulRunner"
			RootDirectory="$(RootDir)\packages\Geckofx60.64.60.0.56\content\Firefox"
			InstallerSourceDirectory="$(RootDir)\Installer"
			OutputFilePath="$(RootDir)\output\installer\GeneratedXulRunner.wxs"
			MatchRegExPattern=".*">
			<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>

	<Target Name="Pack" DependsOnTargets="RestorePackages">
		<MSBuild
			Projects="$(SolutionPath)"
			Targets="pack"
			Properties="Configuration=$(Configuration);ContinuousIntegrationBuild=$(ContinuousIntegrationBuild);DeterministicSourcePaths=$(DeterministicSourcePaths)" />
	</Target>
</Project>
